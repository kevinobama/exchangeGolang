package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/kevingates/exchange/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Exchange)
// DB Table: Plural (exchanges)
// Resource: Plural (Exchanges)
// Path: Plural (/exchanges)
// View Template Folder: Plural (/templates/exchanges/)

// ExchangesResource is the resource for the Exchange model
type ExchangesResource struct {
	buffalo.Resource
}

// List gets all Exchanges. This function is mapped to the path
// GET /exchanges
func (v ExchangesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	exchanges := &models.Exchanges{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Exchanges from the DB
	if err := q.All(exchanges); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, exchanges))
}

// Show gets the data for one Exchange. This function is mapped to
// the path GET /exchanges/{exchange_id}
func (v ExchangesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Exchange
	exchange := &models.Exchange{}

	// To find the Exchange the parameter exchange_id is used.
	if err := tx.Find(exchange, c.Param("exchange_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, exchange))
}

// New renders the form for creating a new Exchange.
// This function is mapped to the path GET /exchanges/new
func (v ExchangesResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.Exchange{}))
}

// Create adds a Exchange to the DB. This function is mapped to the
// path POST /exchanges
func (v ExchangesResource) Create(c buffalo.Context) error {
	// Allocate an empty Exchange
	exchange := &models.Exchange{}

	// Bind exchange to the html form elements
	if err := c.Bind(exchange); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(exchange)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, exchange))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Exchange was created successfully")

	// and redirect to the exchanges index page
	return c.Render(201, r.Auto(c, exchange))
}

// Edit renders a edit form for a Exchange. This function is
// mapped to the path GET /exchanges/{exchange_id}/edit
func (v ExchangesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Exchange
	exchange := &models.Exchange{}

	if err := tx.Find(exchange, c.Param("exchange_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, exchange))
}

// Update changes a Exchange in the DB. This function is mapped to
// the path PUT /exchanges/{exchange_id}
func (v ExchangesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Exchange
	exchange := &models.Exchange{}

	if err := tx.Find(exchange, c.Param("exchange_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Exchange to the html form elements
	if err := c.Bind(exchange); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(exchange)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, exchange))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Exchange was updated successfully")

	// and redirect to the exchanges index page
	return c.Render(200, r.Auto(c, exchange))
}

// Destroy deletes a Exchange from the DB. This function is mapped
// to the path DELETE /exchanges/{exchange_id}
func (v ExchangesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Exchange
	exchange := &models.Exchange{}

	// To find the Exchange the parameter exchange_id is used.
	if err := tx.Find(exchange, c.Param("exchange_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(exchange); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Exchange was destroyed successfully")

	// Redirect to the exchanges index page
	return c.Render(200, r.Auto(c, exchange))
}
